---
source: src/codegen/models.rs
expression: generated_code
---
"\nuse axum::extract::Path;\nuse axum::extract::Query;\nuse axum::extract::State;\nuse axum::http::StatusCode;\nuse axum::response::IntoResponse;\nuse axum::Json;\nuse serde::Deserialize;\nuse std::sync::Arc;\nuse uuid::Uuid;\n\nuse crate::error::Error;\nuse crate::error::Result;\nuse crate::services::ServicesState;\n\nuse crate::models::car::*;\n\npub async fn create_car(\n    State(services): State<Arc<ServicesState>>,\n    Json(payload): Json<AddCarPayload>,\n) -> Result<impl IntoResponse> {\n    services\n        .cars_service\n        .create_car(payload)\n        .await\n        .map(|car| (StatusCode::CREATED, Json(car)))\n}\n\npub async fn get_car(\n    Path(id): Path<Uuid>,\n    State(services): State<Arc<ServicesState>>,\n) -> Result<impl IntoResponse> {\n    return services\n        .cars_service\n        .get_car(&id)\n        .await\n        .map(|car| (StatusCode::OK, Json(CarResponse::Car(car))));\n}\n\npub async fn get_cars(\n    Query(filter_params): Query<CarFilterParams>,\n    State(services): State<Arc<ServicesState>>,\n) -> Result<impl IntoResponse> {\n    if filter_params.is_id_filter() {\n        services.\n                cars_service\n                .get_car_by_id(\n                    &filter_params.id,\n                )\n                .await\n                .map(|car| (StatusCode::OK, Json(cars)))\n    }\n    else\n    if filter_params.is_model_filter() {\n        services.\n                cars_service\n                .get_car_by_model(\n                    &filter_params.name,\n                    &filter_params.model,\n                )\n                .await\n                .map(|car| (StatusCode::OK, Json(cars)))\n    }\n    else\n    if filter_params.is_manufacturer_filter() {\n        services.\n                cars_service\n                .get_car_by_manufacturer(\n                    &filter_params.manufacturer,\n                )\n                .await\n                .map(|car| (StatusCode::OK, Json(cars)))\n    }\n    else\n    if filter_params.is_year_filter() {\n        services.\n                cars_service\n                .get_car_by_year(\n                    &filter_params.year,\n                )\n                .await\n                .map(|car| (StatusCode::OK, Json(cars)))\n    }\n    else\n    if filter_params.is_owner_filter() {\n        services.\n                cars_service\n                .get_car_by_owner(\n                    &filter_params.owner,\n                )\n                .await\n                .map(|car| (StatusCode::OK, Json(cars)))\n    }\n    else {\n        Err(Error::InvalidCarFilter)\n    }\n        \n}\n\npub async fn update_car(\n    Path(id): Path<Uuid>,\n    State(services): State<Arc<ServicesState>>,\n    Json(payload): Json<UpdateCarPayload>,\n) -> Result<impl IntoResponse> {\n    services\n        .cars_service\n        .update_car(&id, payload)\n        .await\n        .map(|car| (StatusCode::OK, Json(car)))\n}\n\npub async fn delete_car(\n    Path(id): Path<Uuid>,\n    State(services): State<Arc<ServicesState>>,\n) -> Result<impl IntoResponse> {\n    services.cars_service.delete_car(&id).await\n}\n\n#[derive(Deserialize)]\npub struct AddCarPayload {\n    pub id: Uuid,\n    pub manufacturer: String,\n    pub model: String,\n    pub name: String,\n    pub owner: Uuid,\n    pub year: I32,\n}\n\n#[derive(Deserialize)]\npub struct UpdateCarPayload {\n    pub id: Option<Uuid>,\n    pub manufacturer: Option<String>,\n    pub model: Option<String>,\n    pub name: Option<String>,\n    pub owner: Option<Uuid>,\n    pub year: Option<I32>,\n}"
