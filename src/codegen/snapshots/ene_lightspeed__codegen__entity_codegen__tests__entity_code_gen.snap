---
source: src/codegen/entity_codegen.rs
expression: code
---
"\nuse serde::Serialize;\nuse serde::Deserialize;\nuse uuid::Uuid;\nuse crate::error::Error;\nuse crate::models::PaginatedResult;\nuse serde::Serializer;\nuse crate::controllers::car_controller::{AddCarPayload, UpdateCarPayload};\n\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\n#[serde(rename_all = \"camelCase\")]\npub struct Car {\n    pub manufacturer: String,\n    pub name: String,\n    pub model: String,\n    pub year: I32,\n    pub id: Uuid,\n    pub owner: Uuid,\n}\n\nimpl Car {\n    pub fn new(payload: AddCarPayload) -> Result<Self, Error> {\n        Ok(Self {\n            primary_key: payload.primary_key,\n            manufacturer: payload.manufacturer,\n            name: payload.name,\n            model: payload.model,\n            year: payload.year,\n            id: payload.id,\n            owner: payload.owner,\n        })\n    }\n\n    pub fn update(payload: UpdateCarPayload) -> Result<Self, Error> {\n        Ok(Self {\n            primary_key: payload.primary_key,\n            manufacturer: payload.manufacturer,\n            name: payload.name,\n            model: payload.model,\n            year: payload.year,\n            id: payload.id,\n            owner: payload.owner,\n        })\n    }\n}\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\n#[serde(rename_all = \"camelCase\")]\npub struct CarFilterAttributes {\n    page: Option<i32>,\n    page_size: Option<i32>,\n    id: Option<Uuid>,\n\n    name: Option<String>,\n    model: Option<String>,\n\n    manufacturer: Option<String>,\n\n    year: Option<I32>,\n\n    owner: Option<Uuid>,\n\n}\n\nimpl CarFilterAttributes {\n    fn is_id_filter(&self) -> bool {\n        self.id.is_some()\n    }\n\n    fn is_model_filter(&self) -> bool {\n        self.name.is_some() && self.model.is_some()\n    }\n\n    fn is_manufacturer_filter(&self) -> bool {\n        self.manufacturer.is_some()\n    }\n\n    fn is_year_filter(&self) -> bool {\n        self.year.is_some()\n    }\n\n    fn is_owner_filter(&self) -> bool {\n        self.owner.is_some()\n    }\n\n\n}"
